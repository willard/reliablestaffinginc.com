# Expires map
map $sent_http_content_type $expires {
    default                    off;
    text/html                  epoch;
    text/css                   max;
    application/javascript     max;
    application/font-woff2     max;
    ~image/                    max;
}

fastcgi_cache_path /etc/nginx-cache levels=1:2 keys_zone=phpcache:100m inactive=60m;
fastcgi_cache_key "$scheme$request_method$host$request_uri";

server {
    listen 80;
    index index.php index.html;
    server_name localhost;
    # server_name reliablestaffinginc.ca;
    error_log  /var/log/nginx/error.log;
    access_log /var/log/nginx/access.log;
    root /var/www/html;

    gzip on;
	gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript image/png image/gif image/jpeg;    
	gzip_vary on;
    gzip_comp_level 5;    
    gzip_proxied any;
    gzip_min_length 256;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location ~ \.php$ {
        try_files $uri =404;
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        fastcgi_pass php:9000;
        fastcgi_index index.php;
        include fastcgi_params;
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        fastcgi_param PATH_INFO $fastcgi_path_info;

        
        fastcgi_cache phpcache; 
	    fastcgi_cache_valid 200 30m;
	    fastcgi_cache_methods GET HEAD;

        add_header X-Fastcgi-Cache $upstream_cache_status; 
	    add_header X-Frame-Options "SAMEORIGIN";
    	add_header X-XSS-Protection "1; mode=block";
    	add_header X-Content-Type-Options nosniff;
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        add_header Content-Security-Policy "connect-src 'self' https://stats.g.doubleclick.net https://www.google-analytics.com ; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://d1vtatt5awzt2n.cloudfront.net  https://tagmanager.google.com/ https://www.googletagmanager.com/ https://www.google-analytics.com/;font-src 'self' https://d1vtatt5awzt2n.cloudfront.net  https://fonts.gstatic.com ;style-src 'self' 'unsafe-inline' https://d1vtatt5awzt2n.cloudfront.net  https://tagmanager.google.com/ https://fonts.googleapis.com/;img-src 'self' 'unsafe-inline' https://d1vtatt5awzt2n.cloudfront.net  https://www.google-analytics.com data:;default-src https://reliablestaffinginc.ca;";
    }

    # This block will catch static file requests of fonts and allows fonts to be requested via CORS
    # The ?: prefix is a 'non-capturing' mark, meaning we do not require
    # the pattern to be captured into $1 which should help improve performance
    location ~* \.(?:eot|woff|woff2|ttf|svg|otf) {
        access_log        off;
        log_not_found     off;

        # The Expires HTTP header is a basic means of controlling caches; it tells all caches how long
        # the associated representation is fresh for. After that time, caches will always check back with
        # the origin server to see if a document is changed.
        #
        # "If a request includes the no-cache directive, it SHOULD NOT include min-fresh, max-stale, or max-age."
        # (source: http://www.ietf.org/rfc/rfc2616.txt, p114)
        #
        # Nginx automatically sets the `Cache-Control: max-age=t` header, if `expires` is present, where t is a time
        # specified in the directive, in seconds. Shortcuts for time can be used, for example 5m for 5 minutes.
        #
        expires           max;

        # public:           marks authenticated responses as cacheable; normally, if HTTP authentication is required,
        #                   responses are automatically private.
        #
        add_header        Cache-Control "public";

        # allow CORS requests
        add_header        Access-Control-Allow-Origin *;

        types     {font/opentype otf;}
        types     {application/vnd.ms-fontobject eot;}
        types     {font/truetype ttf;}
        types     {application/font-woff woff;}
        types     {font/x-woff woff2;}
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }

    # location /.well-known/acme-challenge/ {
    #     root /var/www/certbot;
    # }

    # location / {
    #     return 301 https://$host$request_uri;
    # }
}


# server {
#     listen 443 ssl;
#     server_name reliablestaffinginc.ca;
#     server_tokens off;

#     ssl_certificate /etc/letsencrypt/live/reliablestaffinginc.ca/fullchain.pem;
#     ssl_certificate_key /etc/letsencrypt/live/reliablestaffinginc.ca/privkey.pem;
#     include /etc/letsencrypt/options-ssl-nginx.conf;
#     ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;

#     location / {
#         proxy_pass  http://reliablestaffinginc.ca;
#         proxy_set_header    Host                $http_host;
#         proxy_set_header    X-Real-IP           $remote_addr;
#         proxy_set_header    X-Forwarded-For     $proxy_add_x_forwarded_for;
#     }
# }